#!/usr/bin/env node

'use strict';

let yml_gen = require('../dist/generators/index');
let fs = require('fs');
let path = require('path');
let _ = require('lodash');
let chalk = require('chalk');

const HELP = `
Usage: oasp4fn [provider] [options]
   or: fun [provider] [options]

Supported Providers: aws (by default aws)

Options:
  -o, --opts file       file with the options for the yml generation
  -p, --path directory  directory where the handlers are stored
  -e, --express         generates an express app.ts file
  -h, --help            display the help
`

function logError(err) {
    if(err) {
        switch(typeof err) {
            case 'string':
                console.log(` ${chalk.red('Error!')} ${err}`)
                break;
            case 'object':
                if(err.message) {
                    console.log(` ${chalk.red('Error!')} ${err.message}`)
                    break;
                }
            default:
            console.log(` ${chalk.red('Error!')}\n  ${err}`)
        }
    }
    else {
        console.log(HELP)
    }
}

function oasp4fn() {
    let args = _.slice(process.argv, 2)
    let opts = {}
    try {
    _.some(args, (arg, i, list) => {
        if(arg){
            switch(arg) {
                case 'aws':
                    break;
                case '--opts':
                case '-o':
                    _.set(opts, 'config', _.remove(list, (value, j) => {
                        return j === (i + 1)
                    })[0])
                    break;
                case '--path':
                case '-p':
                    _.set(opts, 'path', _.remove(list, (value, j) => {
                        return j === (i + 1)
                    })[0])
                    break;
                case '--express':
                case '-e':
                    opts.app = true;
                    break;
                case '--help':
                case '-h':
                    throw false
                default:
                    throw `The argument "${arg}" isn't valid. Please, for more information, run "oasp4fn --help"`;
            }
        }
        return false
    })
    if(opts.config) {
        if(fs.existsSync(opts.config)) {
            _.assign(opts, require(`${process.cwd()}${path.sep}${opts.config}`))
            opts = _.omit(opts, 'config')
        }
        else
            throw `The options file "${opts.config}" doesn't exist.`
    }
    else if (fs.existsSync("oasp4fn.config.js")) {
        _.assign(opts, require(`${process.cwd()}${path.sep}oasp4fn.config.js`))
    }
    
    _.isEmpty(opts) ? yml_gen.run() : yml_gen.run(opts);

    } catch(e) {
        logError(e)
    }
}

oasp4fn()